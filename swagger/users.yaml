openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for user authentication and profile management

tags:
  - name: Users
    description: User authentication and management

paths:
  /api/users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Invalid input or user already exists
        500:
          description: Server error

  /api/users/login:
    post:
      tags: [Users]
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials
        500:
          description: Server error

  /api/users/logout:
    post:
      tags: [Users]
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully logged out
        401:
          description: Unauthorized
        500:
          description: Server error

  /api/users/profile:
    get:
      tags: [Users]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
        500:
          description: Server error

  /api/users/update:
    put:
      tags: [Users]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
        401:
          description: Unauthorized
        500:
          description: Server error

  /api/users/change-password:
    put:
      tags: [Users]
      summary: Change user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        200:
          description: Password changed successfully
        400:
          description: Invalid input or wrong current password
        401:
          description: Unauthorized
        500:
          description: Server error

  /api/users/{id}:
    delete:
      tags: [Users]
      summary: Delete user account (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      responses:
        200:
          description: User deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden (admin only)
        404:
          description: User not found
        500:
          description: Server error

components:
  schemas:
    User:
      type: object
      required:
        - username
        - firstName
        - lastName
        - email
      properties:
        username:
          type: string
          example: "johndoe123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        number:
          type: string
          example: "+1234567890"
        email:
          type: string
          format: email
          example: "john@example.com"
        isAdmin:
          type: boolean
          default: false
        dateOfBirth:
          type: string
          format: date
          example: "1990-01-01"
        gender:
          type: string
          example: "Male"
        image:
          type: string
          example: "https://example.com/profile.jpg"

    RegisterRequest:
      type: object
      required:
        - username
        - firstName
        - lastName
        - email
        - password
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        number:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
        image:
          type: string
          format: binary

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        number:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
        image:
          type: string
          format: binary

    PasswordChangeRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT